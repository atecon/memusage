set verbose off
clear

include "./src/memusage.inp" --force
include assertion.gfn

nulldata 3
series x = normal()
series y = normal()
list L = y x

function void test_memusage (const list L)
    print "Start memusage()"

    scalar memory_usage1 = (nelem(L) * nobs(L[1]) * 8) / 1024 / 1024
    assert_equal_num(memusage(defbundle("L", L)), memory_usage1)

    scalar memory_usage2 = (1 * nobs(L[1]) * 8) / 1024 / 1024
    assert_equal_num(memusage(defbundle("y", L[1])), memory_usage2)

    scalar memory_usage3 = (nelem(L) * nobs(L[1]) * 8) / 1024 / 1024
    assert_equal_num(memusage(defbundle("M", {L})), memory_usage3)

    string s = "some string!"
    scalar memory_usage4 = (strlen(s) * 8) / 1024 / 1024
    assert_equal_num(memusage(defbundle("s", s)), memory_usage4)

    matrices M = defarray({L[1]}, {L[2]})
    scalar memory_usage5 = (nelem(L) * nobs(L[1]) * 8) / 1024 / 1024
    assert_equal_num(memusage(defbundle("M", M)), memory_usage5)

    # Put all items into a single bundle
    scalar total_memory = memory_usage1 + memory_usage2 + memory_usage3 + memory_usage4 + memory_usage5
    assert_equal_num(memusage(\
        defbundle("M", M, "s", s, "m", {L}, "y", L[1], "L", L)), total_memory)
end function
test_memusage(L)


function void test_memusage_list (const list L)
    print "Start memusage_list()"

    scalar memory_usage = (nelem(L) * nobs(L[1]) * 8) / 1024 / 1024
    assert_equal_num(memusage_list(L), memory_usage)
end function
test_memusage_list(L)

function void test_memusage_series (const series y)
    print "Start memusage_series()"

    scalar memory_usage = (1 * nobs(L[1]) * 8) / 1024 / 1024
    assert_equal_num(memusage_series(y), memory_usage)
end function
test_memusage_list(y)

function void test_memusage_matrix (const list L)
    print "Start memusage_matrix()"

    scalar memory_usage = (nelem(L) * nobs(L[1]) * 8) / 1024 / 1024
    assert_equal_num(memusage_matrix({L}), memory_usage)
end function
test_memusage_matrix(L)


function void test_memusage_matrices (const list L)
    print "Start memusage_matrices()"

    matrices M = defarray({L[1]}, {L[2]})
    scalar memory_usage = (nelem(L) * nobs(L[1]) * 8) / 1024 / 1024
    assert_equal_num(memusage_matrices(M), memory_usage)
end function
test_memusage_matrices(L)


function void test_memusage_string (void)
    print "Start memusage_string()"

    string s = "some string!"
    scalar memory_usage = (strlen(s) * 8) / 1024 / 1024
    assert_equal_num(memusage_string(s), memory_usage)

    string s = ""
    scalar memory_usage = (strlen(s) * 8) / 1024 / 1024
    assert_equal_num(memusage_string(s), memory_usage)
end function
test_memusage_string()

/* Fail to determine exact size of string arrays
function void test_memusage_strings (void)
    print "Start memusage_strings()"

    strings s = defarray("first string", "second string")
    scalar memory_usage = ((12 + 13) * 8) / 1024 / 1024
    assert_equal_num(memusage_strings(s), memory_usage)

    strings s = defarray("", "")
    scalar memory_usage = (0 * 8) / 1024 / 1024
    assert_equal_num(memusage_strings(s), memory_usage)
end function
test_memusage_strings()
*/


printf "\nAll tests succesfully finished.\n"
